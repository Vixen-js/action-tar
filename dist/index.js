"use strict";var l=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var g=(r,t,e,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of d(t))!h.call(r,o)&&o!==e&&s(r,o,{get:()=>t[o],enumerable:!(a=p(t,o))||a.enumerable});return r};var i=(r,t,e)=>(e=r!=null?l(w(r)):{},g(t||!r||!r.__esModule?s(e,"default",{value:r,enumerable:!0}):e,r));var m=require("child_process"),n=i(require("@actions/core")),c=i(require("tar")),u=i(require("fs"));(0,m.execSync)("npm i @actions/core tar fs");try{let r=n.default.getInput("cwd"),t=n.default.getInput("command",{required:!0}),e=n.default.getInput("files",{required:!0}).split(`
`).filter(f=>f.length>0),a=n.default.getInput("outPath"),o=Array.isArray(e)?e:[e];switch(t){case"compress":{if(!a)throw new Error("outPath is required");c.c({cwd:r,gzip:!0,sync:!0},o).pipe(u.default.createWriteStream(a));break}case"extract":{if(e.length!==1)throw new Error("Only one file can be extracted at a time");c.x({C:r,sync:!0,file:e[0]});break}default:throw new Error(`Unknown command: ${t}`)}}catch(r){console.log(r),n.default.setFailed(r.message)}
